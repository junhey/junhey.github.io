<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>疯狂的迈步</title>
  <icon>https://www.gravatar.com/avatar/4103bc611e70e8ea7e18cb7ff4af8d92</icon>
  <subtitle>疯狂的迈步（Junhey）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://junhey.com/"/>
  <updated>2023-08-22T04:11:10.879Z</updated>
  <id>http://junhey.com/</id>
  
  <author>
    <name>junhey</name>
    <email>junhey@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些事⇧</title>
    <link href="http://junhey.com/2019/09/05/2019-09-05-20.html"/>
    <id>http://junhey.com/2019/09/05/2019-09-05-20.html</id>
    <published>2019-09-05T12:22:10.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>最近有很深的感悟，写字也写的很少，博客也基本上一年没有更新了，说到底忙啊，想想忙在哪，好像也没有什么输出，没输出意味着这段时间收获比较少，就算有也是思想上的改变，但是对于提升来说还是有输出比较好，博客应该记录📝 技术，生活等等，谢谢心得体会。</p><p>加班了，后面继续输出系统化的文档，以前的博客不更新，作为存档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有很深的感悟，写字也写的很少，博客也基本上一年没有更新了，说到底忙啊，想想忙在哪，好像也没有什么输出，没输出意味着这段时间收获比较少，就算有也是思想上的改变，但是对于提升来说还是有输出比较好，博客应该记录📝 技术，生活等等，谢谢心得体会。&lt;/p&gt;
&lt;p&gt;加班了，后面继
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://junhey.com/categories/JavaScript/"/>
    
    
      <category term="js" scheme="http://junhey.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-备忘录模式</title>
    <link href="http://junhey.com/2018/09/26/memento.html"/>
    <id>http://junhey.com/2018/09/26/memento.html</id>
    <published>2018-09-26T14:58:09.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>备忘录模式（Memento）<br>在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的状态。</p><p>比如我们分页数据切换时，上一页下一页数据切换，点击下一页的时候缓存好上一页已经加载的数据。</p><p>eg：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Page = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)=</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125; <span class="comment">//缓存</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">page, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cache[page])&#123;<span class="comment">// 判断缓存是否有数据</span></span><br><span class="line">      <span class="comment">// 从缓存中读取数据</span></span><br><span class="line">      showPage(page, cache[page]);</span><br><span class="line">      fn&amp;&amp; fn();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 发请求获取数据</span></span><br><span class="line">      $.<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>备忘者模式最主要的任务是对现有的数据或者状态做缓存，为将来某个时刻使用或者恢复做准备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;备忘录模式（Memento）&lt;br&gt;在不破坏对象的封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的状态。&lt;/p&gt;
&lt;p&gt;比如我们分页数据切换时，上一页下一页数据切换，点击下一页的时候缓存好上一页已经加载的数据。&lt;/p&gt;
&lt;p&gt;eg：&lt;
      
    
    </summary>
    
      <category term="design-patterns" scheme="http://junhey.com/categories/design-patterns/"/>
    
    
      <category term="design-patterns" scheme="http://junhey.com/tags/design-patterns/"/>
    
  </entry>
  
  <entry>
    <title>置顶更新</title>
    <link href="http://junhey.com/2018/06/13/top.html"/>
    <id>http://junhey.com/2018/06/13/top.html</id>
    <published>2018-06-13T02:18:09.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博客文章不定期更新于以下网站："><a href="#博客文章不定期更新于以下网站：" class="headerlink" title="博客文章不定期更新于以下网站："></a>博客文章不定期更新于以下网站：</h3><ul><li><p><a href="https://github.com/junhey/studyNotes/issues" target="_blank" rel="noopener">https://github.com/junhey/studyNotes/issues</a></p></li><li><p><a href="https://www.cnblogs.com/junhey" target="_blank" rel="noopener">博客园</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;博客文章不定期更新于以下网站：&quot;&gt;&lt;a href=&quot;#博客文章不定期更新于以下网站：&quot; class=&quot;headerlink&quot; title=&quot;博客文章不定期更新于以下网站：&quot;&gt;&lt;/a&gt;博客文章不定期更新于以下网站：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="html" scheme="http://junhey.com/tags/html/"/>
    
      <category term="css" scheme="http://junhey.com/tags/css/"/>
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Js继承的实现</title>
    <link href="http://junhey.com/2018/05/27/js-class.html"/>
    <id>http://junhey.com/2018/05/27/js-class.html</id>
    <published>2018-05-27T07:26:50.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>被问到es6的class继承是怎么实现的，想了一会不知道怎么回答好，然后感觉里面会有一些优化之类的，便想了写写代码试试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  /**</span><br><span class="line">   * [使用对象冒充实现继承（多继承）]</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.name = name</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> iParent = <span class="keyword">new</span> Parent(<span class="string">'james'</span>)</span></span><br><span class="line">  iParent.sayName()</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.parent = Parent</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.parent(name)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">delete</span> <span class="keyword">this</span>.parent</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.saySome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'my name: '</span> + <span class="keyword">this</span>.name)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.sayName()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> iChild = <span class="keyword">new</span> Child(<span class="string">'kobe'</span>)</span></span><br><span class="line">  iChild.saySome()</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(iChild.constructor)</span></span><br><span class="line"></span><br><span class="line">  /** </span><br><span class="line">   * Call/Apply方法改变函数上下文实现继承（该种方式不能继承原型链，若想继承原型链，则采用混合模式）</span><br><span class="line"><span class="javascript">   * 实现原理：改变函数内部的函数上下文<span class="keyword">this</span>，使它指向传入函数的具体对象</span></span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">firstname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.fname = firstname;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.age = <span class="number">28</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">firstname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    Parent.call(<span class="keyword">this</span>, firstname); <span class="comment">// 将this传给父构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//Parent.apply(this, [firstname]); // 与call作用相同</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.saySomeThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.fname);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.sayAge();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> firstname;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myChild = <span class="keyword">new</span> Child(<span class="string">'Lee'</span>);</span></span><br><span class="line">  myChild.saySomeThing();</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(myChild.constructor)</span></span><br><span class="line"><span class="javascript">  myChild.constructor == Child; <span class="comment">// true</span></span></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 原型链实现继承</span><br><span class="line">   * 实现原理：使子类原型对象指向父类的实例以实现继承，即重写类的原型，弊端是不能直接实现多继承</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">firstname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.fname = firstname;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.age = <span class="number">28</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.saySomeThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.fname);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.sayAge();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Child.prototype = <span class="keyword">new</span> Parent();</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myChild = <span class="keyword">new</span> Child(<span class="string">'Lee'</span>);</span></span><br><span class="line"><span class="javascript">  myChild.saySomeThing(); <span class="comment">// Lee 28</span></span></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 混合模式</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Parent.prototype.sayParent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'This is parent!'</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">firstname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    Parent.call(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.fname = firstname;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.age = <span class="number">28</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.saySomeThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.fname);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.sayAge();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Child.prototype = <span class="keyword">new</span> Parent();</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myChild = <span class="keyword">new</span> Child(<span class="string">'Lee'</span>);</span></span><br><span class="line">  myChild.saySomeThing();</span><br><span class="line">  myChild.sayParent();</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(myChild.constructor)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">hello</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.hello = hello;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Parent.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">this</span>.hello);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">hello, world</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    Parent.call(<span class="keyword">this</span>, hello); <span class="comment">//将父类的属性继承过来 </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.world = world; <span class="comment">//新增一些属性 </span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Child.prototype = <span class="keyword">new</span> Parent(); <span class="comment">//将父类的方法继承过来 </span></span></span><br><span class="line"><span class="javascript">  Child.prototype.sayWorld = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//新增一些方法 </span></span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">this</span>.world);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> c = <span class="keyword">new</span> Child(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>);</span></span><br><span class="line">  c.sayHello();</span><br><span class="line">  c.sayWorld();</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * es6继承</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>(props) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.name = props.name || <span class="string">'未知'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line"><span class="javascript">      alert(<span class="keyword">this</span>.name + <span class="string">"在吃东西..."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//class继承</span></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>(props) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//调用实现父类的构造函数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">super</span>(props);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.type = props.type || <span class="string">"未知"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fly() &#123;</span><br><span class="line"><span class="javascript">      alert(<span class="keyword">this</span>.name + <span class="string">"在飞..."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myBird = <span class="keyword">new</span> Bird(&#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'鹦鹉'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line">  myBird.eat()</span><br><span class="line">  myBird.fly()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码是实现js继承的一些方法，仅供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;被问到es6的class继承是怎么实现的，想了一会不知道怎么回答好，然后感觉里面会有一些优化之类的，便想了写写代码试试&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="class" scheme="http://junhey.com/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>javascript event loop</title>
    <link href="http://junhey.com/2018/04/07/Javascript-Event-Loop.html"/>
    <id>http://junhey.com/2018/04/07/Javascript-Event-Loop.html</id>
    <published>2018-04-07T07:06:36.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>在Nodejs事件循环机制中，有任务两个队列</p><ol><li>Macrotask队列</li><li>Microtask队列</li></ol><p>在一个事件循环里，这两个队列会分两步执行，第一步会固定地执行一个（且仅一个）Macrotask任务，第二步会执行整个Microtask队列中的所有任务。并且，在执行Microtask队列任务的时候，也允许加入新的Microtask任务，直到所有Microtask任务全部执行完毕，才会结束循环。  </p><blockquote><p>简单点讲就是：先执行Macrotask任务, 然后检查Microtask队列 , 如果有就执行Microtask队列 , 再回到Macrotask任务中</p></blockquote><p>任务队列不止一个, 且存在优先级:<br>process.nextTick &gt; promise.then &gt; setTimeout &gt; setImmediate</p><ul><li><p>macrotasks: script(整体代码),setTimeout, setInterval, setImmediate, I/O, UI rendering</p></li><li><p>microtasks: process.nextTick, Promises, Object.observe, MutationObserver</p></li></ul><p>whatwg规范: </p><ul><li>一个事件循环(event loop)会有一个或多个任务队列(task queue) </li><li>task queue 就是 macrotask queue </li><li>每一个 event loop 都有一个 microtask queue </li><li>task queue == macrotask queue != microtask queue </li><li>一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue 中</li></ul><p>包裹在一个 script 标签中的js代码也是一个 task 确切说是 macrotask.</p><p>例如从一个事件循环开始，到结束会经历以下步骤： </p><ol><li>引擎从macrotask queue中取出一个任务执行; </li><li>将microtask queue中的所有任务取出，按顺序全部执行; </li><li>重复1;</li></ol><p>但是, requestAnimationFrame callback 的执行时机与浏览器的 render 策略有关，是黑箱的。</p><p>看下面几个示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.info(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="number">2</span>)</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="number">3</span>)</span><br><span class="line">    resolve()</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="number">4</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 2571346</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.info(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="number">2</span>)</span><br><span class="line">  resolve()</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="number">4</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 2576134</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 34687521</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">await</span>  async2(); <span class="comment">//执行这一句后，await会让出当前线程，将后面的代码加到任务队列中，然后继续执行函数后面的同步代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">'c'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"d"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"e"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"g"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'h'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: d a c f h b g e</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>如何选用Macrotask或Microtask呢？<br>可以这样简单理解：如果你想让一个任务立即执行，那么就把它设置为Microtask，除此之外都用Macrotask比较好。因为可以看出，虽然Node是异步非阻塞的，但在一个事件循环中，Microtask的执行方式基本上就是用同步的。</p><p>可能存在的问题<br>相信读到这里你已经意识到，如果一个Microtask队列太长，或者执行过程中不断加入新的Microtask任务，会导致下一个Macrotask任务很久都执行不了。结果就是，你可能会遇到UI一直刷新不了，或者I/O任务一直完成不了。</p><p>应该是考虑到了这一点，至少Microtask任务中的process.nextTick任务，是被设置了（在一个事件循环中的）最大调用次数的，叫process.maxTickDepth。默认是1000。一定程度上避免了上述情况。</p><p>参考文章<br><a href="https://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/" target="_blank" rel="noopener">node-js-at-scale-understanding-node-js-event-loop</a><br><a href="https://www.zcfy.cc/article/node-js-at-scale-understanding-the-node-js-event-loop-risingstack-1652.html" target="_blank" rel="noopener">理解 Node.js 事件循环</a><br><a href="https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context" target="_blank" rel="noopener">difference-between-microtask-and-macrotask-within-an-event-loop-context</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Nodejs事件循环机制中，有任务两个队列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Macrotask队列&lt;/li&gt;
&lt;li&gt;Microtask队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在一个事件循环里，这两个队列会分两步执行，第一步会固定地执行一个（且仅一个）Macrotask任务，第二步会
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="event-loop" scheme="http://junhey.com/tags/event-loop/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript定时器原理</title>
    <link href="http://junhey.com/2017/11/20/javascript-settimeout.html"/>
    <id>http://junhey.com/2017/11/20/javascript-settimeout.html</id>
    <published>2017-11-20T11:02:13.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>javascript内有两个定时器setTimeout()和setInterval()。</p><ul><li>setTimeout<br>定义一个在指定时间后触发的函数或计算表达式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(&quot;alert(&apos;this is test&apos;)&quot;,2000);</span><br></pre></td></tr></table></figure></li></ul><p>用法可以参考下<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="noopener">MDN的setTimeout定义</a></p><p>看到后面应该是这样定义：<strong>在指定时间内, 将任务放入事件队列,等待js引擎空闲后被执行</strong></p><ul><li>setInterval<br>在指定的时间间隔后执行相应的函数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(&quot;console.log(&apos;demo&apos;);&quot;,1000);</span><br></pre></td></tr></table></figure></li></ul><p>首先看一道题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>); </span><br><span class="line">setTimeout(<span class="string">"alert(2)"</span>, <span class="number">0</span>); </span><br><span class="line">alert(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>执行结果是1 3 2<br>为什么呢？答：因为js的单线程特性。<br>首先JS线程alert内容为1，然后读取到setTimeout定时器，这个时候就会执行浏览器的线程，然后跳过定时器继续执行，这个时候你就看到了弹出框的内容为3，然后因为定时器的时间为0，所以一执行定时器线程就会即可将弹出框内容为2字样的任务添加到主线程（JS引擎线程）的队列之后，等待JS引擎的调用，这个时候我们看到的结果是先弹出13，然后再弹出2。</p><p>这里给出一张很重要的图：<br><img src="https://user-images.githubusercontent.com/8244100/29369261-b35c0e50-8267-11e7-8fce-0afc1e25bb0d.png" alt="image"><br>然而setTimeout(0)做了什么？<br>它会开启一个定时器线程，并不会影响后续的代码执行，这个定时器线程会在事件队列后面添加一个任务，例如上面图中的t3。等到前面的t1，t2执行完后再去执行t3，因此在前面第二部分内容中的输出顺序为1 &gt; 3 &gt; 2。</p><p>总结(参考文献摘来的，写得太好了😆)：</p><ol><li>浏览器的内核是多线程的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：javascript引擎线程，GUI渲染线程，浏览器事件触发线程。</li><li>javascript引擎是基于事件驱动单线程执行的.JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。</li><li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</li><li>当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。</li></ol><p>参考文献：<br><a href="http://blog.csdn.net/liaodehong/article/details/52212721" target="_blank" rel="noopener">JavaScript定时器原理及高级使用</a><br><a href="http://www.cnblogs.com/yelongsan/p/6296700.html" target="_blank" rel="noopener">js setTimeOut() by 蒂其之死</a><br><a href="https://segmentfault.com/a/1190000003764106" target="_blank" rel="noopener">javascript 定时器工作原理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;javascript内有两个定时器setTimeout()和setInterval()。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setTimeout&lt;br&gt;定义一个在指定时间后触发的函数或计算表达式。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="settimeout" scheme="http://junhey.com/tags/settimeout/"/>
    
  </entry>
  
  <entry>
    <title>React生命周期</title>
    <link href="http://junhey.com/2017/10/11/react-product-cycle.html"/>
    <id>http://junhey.com/2017/10/11/react-product-cycle.html</id>
    <published>2017-10-11T14:32:10.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在我们编程过程中对于React学习最重要的就是生命周期了，学习react生命周期对于自己的编程也会有很大的帮助。</p></blockquote><p>如果你基础够好的话建议直接看代码<a href="https://github.com/facebook/react/blob/master/src/renderers/dom/__tests__/ReactDOMProduction-test.js#L89-L175" target="_blank" rel="noopener">https://github.com/facebook/react/blob/master/src/renderers/dom/<strong>tests</strong>/ReactDOMProduction-test.js#L89-L175</a>，从代码中可以看出ReactDOM的生成过程，下面详讲React的生命周期：</p><ol><li>实例化</li></ol><ul><li><p>getDefaultProps<br>调用 React.createClass，然后触发getDefaultProps 方法，该方法返回一个对象，然后与父组件指定的props对象合并，最后赋值给 this.props 作为该组件的默认属性，该方法只调用一次</p></li><li><p>getInitialState<br>初始化state 的值，返回值会赋给this.state，在这个方法里，你已经可以访问到this.props。</p></li><li><p>componentWillMount<br>操作state，不会触发再次渲染，建议用constructor代替</p></li><li><p>render<br>根据 state 的值，生成页面需要的虚拟 DOM 结构</p></li><li><p>componentDidMount<br>可以设置state，会触发再次渲染，组件内部可以通过 ReactDOM.findDOMNode(this)来获取当前组件的节点操作DOM</p></li></ul><ol start="2"><li>存在期</li></ol><ul><li><p>componentWillReceiveProps(nextProps)<br>当组件接收到新的props时会触发该函数，通常可以调用this.setState方法来比较this.props和nextProps的执行状态，完成对state的修改</p></li><li><p>shouldComponentUpdate(nextProps, nextState<br>该方法用来拦截新的props或state，然后判断是否更新组件</p></li><li><p>componentWillUpdate(nextProps, nextState)<br>更新之前调用</p></li><li><p>rende<br>根据diff算法，生成需要更新的虚拟DOM数据</p></li><li><p>componentDidUpdate(prevProps, prevState)<br>render方法成功执行之后，会渲染出来真实的DOM，你可以在该方法中使用this.getDOMNode()方法访问原生DOM</p></li></ul><ol start="3"><li>销毁&amp;清理期</li></ol><ul><li>componentWillUnmount<br>会触发componentWillUnmount，通常是移除DOM，取消事件绑定，销毁定时器等工作</li></ul><hr><p>参考文献：<br><a href="https://segmentfault.com/a/1190000006917448" target="_blank" rel="noopener">理解React 组件</a><br><a href="http://www.cnblogs.com/webbest/p/5862436.html" target="_blank" rel="noopener">React组件的生命周期</a><br><a href="http://www.jianshu.com/p/c36a0601b00c" target="_blank" rel="noopener">React生命周期解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在我们编程过程中对于React学习最重要的就是生命周期了，学习react生命周期对于自己的编程也会有很大的帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你基础够好的话建议直接看代码&lt;a href=&quot;https://github.com/fa
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://junhey.com/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>JS对象的深浅复制</title>
    <link href="http://junhey.com/2017/09/26/javascript-copy.html"/>
    <id>http://junhey.com/2017/09/26/javascript-copy.html</id>
    <published>2017-09-26T13:18:20.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h2><p>关于js对象的深浅复制，先来一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象浅复制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shadowCopy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">var</span> newObj;</span><br><span class="line">    <span class="keyword">if</span>(obj.constructor === <span class="built_in">Array</span>)&#123;</span><br><span class="line">        newObj = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newObj = &#123;&#125;;</span><br><span class="line">        newObj.constructor = obj.constructor;<span class="comment">//保留对象的constructor属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class="line">          newObj[prop] = obj[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>上述代码实现了浅复制，其中解决了<code>不能正确实现数组的浅复制</code>和<code>复制操作丢失了对象的constructor属性</code>的问题，那么什么是深浅复制呢？<br>从层次上对象的复制分为浅复制和深复制，浅复制是指只复制一层对象的属性，不会复制对象中的对象的属性，对象的深复制会复制对象中层层嵌套的对象的属性。复制对象时，除了要复制对象的属性外，还要兼顾到是否保留了对象的constructor属性，是否对每一种数据类型（JavaScript常见的数据类型有String,Number,Boolean,Data,RegExp,Array,Funtion,Object）都实现正确的复制。实现浅复制可以用Object.assign函数，👇下面具体讲讲这个函数。</p><p>Object.assign函数<br>函数参数为一个目标对象（该对象作为最终的返回值）源对象(此处可以为任意多个)。通过调用该函数可以拷贝所有可被枚举的自有属性值到目标对象中。拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。<br><figure class="highlight plain"><figcaption><span>...sources)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用该函数需要注意三点：1. 可被枚举的属性，2. 自有属性，3. string或者Symbol类型是可以被直接分配的。</span><br><span class="line"></span><br><span class="line">## 深复制</span><br><span class="line"></span><br><span class="line">那么深复制可能就需要层层递归，复制对象的所有属性，包括对象属性的属性的属性，有人想出了用JSON的解析实现，如下代码：</span><br><span class="line">```javascript</span><br><span class="line">function deepCopy(obj)&#123;</span><br><span class="line">   if(typeof obj !== &quot;object&quot;)&#123; return ;&#125;</span><br><span class="line">   var str = JSON.stringify(obj);</span><br><span class="line">   return JSON.parse(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>👆上面的方法不适用的条件是</p><ol><li>需要考虑把函数，正则等特殊数据类型复制</li><li>当前对象不支持JSON</li><li>JSON复制会忽略掉值为undefined以及函数表达式<br>可以看下面的栗子：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="literal">undefined</span>,</span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="built_in">console</span>.log(obj2);<span class="comment">//输出：Object &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>这个时候还是要层层递归来不同情况不同分析来考虑的，最终的方案如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象深复制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj.constructor === <span class="built_in">Array</span> ? []:&#123;&#125;;</span><br><span class="line">    newObj.constructor = obj.constructor;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">"object"</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</span><br><span class="line">        newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));<span class="comment">//若需要考虑特殊的数据类型，如正则，函数等，需把这个else if去掉即可</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj[prop].constructor === <span class="built_in">RegExp</span> ||obj[prop].constructor === <span class="built_in">Date</span>)&#123;</span><br><span class="line">                newObj[prop] = obj[prop];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[prop] === <span class="string">'object'</span>)&#123;</span><br><span class="line">                newObj[prop] = deepCopy(obj[prop]);<span class="comment">//递归</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newObj[prop] = obj[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第三方库实现的深浅复制（推荐看文档源码，这里就不详讲了）"><a href="#第三方库实现的深浅复制（推荐看文档源码，这里就不详讲了）" class="headerlink" title="第三方库实现的深浅复制（推荐看文档源码，这里就不详讲了）"></a>第三方库实现的深浅复制（推荐看文档源码，这里就不详讲了）</h2><ol><li>jQuery.extend</li></ol><p><a href="http://api.jquery.com/jQuery.extend/" target="_blank" rel="noopener">jQuery.extend()</a></p><ol start="2"><li>lodash 中  _.clone() / _.cloneDeep()</li></ol><p><a href="https://lodash.com/docs#clone" target="_blank" rel="noopener">_.clone()</a><br><a href="https://lodash.com/docs#cloneDeep" target="_blank" rel="noopener">_.cloneDeep()</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在我们平时应用过程中，浅复制优先考虑Object.assign函数，深复制优先考虑lodash中的_.cloneDeep()方法，如果是简单的深复制并符合JSON格式可以考虑JSON.parse(JSON.stringify(obj))。</p><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/26282765" target="_blank" rel="noopener">js 基础深浅拷贝</a><br><a href="https://cnodejs.org/topic/56c49662db16d3343df34b13" target="_blank" rel="noopener">理解Object.assign</a><br><a href="https://segmentfault.com/a/1190000005898146" target="_blank" rel="noopener">js深浅复制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浅复制&quot;&gt;&lt;a href=&quot;#浅复制&quot; class=&quot;headerlink&quot; title=&quot;浅复制&quot;&gt;&lt;/a&gt;浅复制&lt;/h2&gt;&lt;p&gt;关于js对象的深浅复制，先来一段代码&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://junhey.com/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>学习设计模式之MVC、MVP、MVVM</title>
    <link href="http://junhey.com/2017/08/19/mvc-mvp-mvvm.html"/>
    <id>http://junhey.com/2017/08/19/mvc-mvp-mvvm.html</id>
    <published>2017-08-19T13:26:50.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引言：认真学习了下广义MVC模式下前端怎么写，狭义的MVC其实是有一个变化过程：MVC MVP MVVM，网上看了很多的关于这方面的介绍，以前总是将视图数据逻辑写一个模块，最近尝试分开并用组件式的开发的方式…</p></blockquote><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a><strong>MVC</strong></h3><p>MVC是模型(Model)－视图(View)－控制器(Controller)的缩写，是设计模式中最常用的软件架构。</p><blockquote><p>视图（View）：用户界面。<br>控制器（Controller）：业务逻辑<br>模型（Model）：数据保存</p></blockquote><p>所有方式都是单向通信：</p><ul><li>View 接受用户交互请求</li><li>View 将请求转交给Controller处理</li><li>Controller 操作Model进行数据更新保存</li><li>数据更新保存之后，Model会通知View更新</li><li>View 更新变化数据使用户得到反馈</li></ul><p>MVC简化模型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面加载后创建MVC对象</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建MVC对象</span></span><br><span class="line">    <span class="keyword">var</span> MVC=MVC||&#123;&#125;；</span><br><span class="line">    <span class="comment">//初始化MVC数据模型层</span></span><br><span class="line">    MVC.model=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">    <span class="comment">//初始化MVC视图层</span></span><br><span class="line">    MVC.view=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">    <span class="comment">//初始化MVC控制器层</span></span><br><span class="line">    MVC.controller=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ol><li><p>MVC数据模型层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MVC数据模型层</span></span><br><span class="line">MVC.model=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//内部数据对象</span></span><br><span class="line">    <span class="keyword">var</span> M=&#123;&#125;;</span><br><span class="line">    <span class="comment">//服务器端获取数据，通常通过Ajax获取并存储</span></span><br><span class="line">    M.data=&#123;&#125;;</span><br><span class="line">    <span class="comment">//配置数据</span></span><br><span class="line">    M.config=&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//获取服务器端数据</span></span><br><span class="line">    getData:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> M.data[m];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//获取配置数据</span></span><br><span class="line">    getConfig:<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//根据数据字段获取数据</span></span><br><span class="line">    <span class="keyword">return</span> M.config[c]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置服务器数据</span></span><br><span class="line">    setData:<span class="function"><span class="keyword">function</span>(<span class="params">m,v</span>)</span>&#123;</span><br><span class="line">    M.data[m]=v;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置配置数据</span></span><br><span class="line">    setConfig:<span class="function"><span class="keyword">function</span>(<span class="params">c,v</span>)</span>&#123;</span><br><span class="line">    M.data[c]=v;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></li><li><p>MVC视图层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MVC视图层</span></span><br><span class="line">MVC.view=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//模型数据层对象操作方法引用</span></span><br><span class="line"><span class="keyword">var</span> M=MVC.model;</span><br><span class="line"><span class="comment">//内部视图创建方法对象</span></span><br><span class="line"><span class="keyword">var</span> V=&#123;&#125;;</span><br><span class="line"><span class="comment">//获取视图的接口方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"><span class="comment">//根据视图名词返回视图</span></span><br><span class="line">V[v]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></li><li><p>MVC控制器层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MVC控制器层</span></span><br><span class="line">MVC.controller=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//模型数据层对象操作方法引用</span></span><br><span class="line"><span class="keyword">var</span> M=MVC.model;</span><br><span class="line"><span class="comment">//视图数据层对象操作方法引用</span></span><br><span class="line"><span class="keyword">var</span> V=MVC.view;</span><br><span class="line"><span class="comment">//控制器创建方法对象</span></span><br><span class="line"><span class="keyword">var</span> C=&#123;&#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></li></ol><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a><strong>MVP</strong></h3><p>MVP是Model-View-Presenter，即将MVC中的控制器Controller换成了Presenter负责逻辑的处理。</p><blockquote><p>MVC和MVP的区别是：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller。</p></blockquote><p>各部分之间都是双向通信：</p><ul><li>View 接收用户交互请求</li><li>View 将请求转交给 Presenter</li><li>Presenter 操作Model进行数据更新</li><li>Model 通知Presenter数据发生变化</li><li>Presenter 更新View数据</li></ul><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a><strong>MVVM</strong></h3><p>MVVM是Model-View-ViewModel，和MVP的区别在于Presenter换成了ViewModel负责逻辑处理。</p><blockquote><p>MVVM的优点是低耦合、可重用性、独立开发。</p></blockquote><p>双向绑定（data-binding）：</p><ul><li>View 接收用户交互请求</li><li>View 将请求转交给ViewModel</li><li>ViewModel 操作Model数据更新</li><li>Model 更新完数据，通知ViewModel数据发生变化</li><li>ViewModel 更新View数据</li></ul><p>后面会详细介绍MVVM的设计模式架构，同时会有针对于react和vue之类MVVM框架的原理。</p><p>参考文章：</p><ol><li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">MVC，MVP 和 MVVM 的图示</a></li><li><a href="http://blog.csdn.net/hudan2714/article/details/50990359" target="_blank" rel="noopener">mvc、mvp、mvvm使用关系总结</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引言：认真学习了下广义MVC模式下前端怎么写，狭义的MVC其实是有一个变化过程：MVC MVP MVVM，网上看了很多的关于这方面的介绍，以前总是将视图数据逻辑写一个模块，最近尝试分开并用组件式的开发的方式…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="function" scheme="http://junhey.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-移动端商城</title>
    <link href="http://junhey.com/2017/07/06/wxapp-develop-section.html"/>
    <id>http://junhey.com/2017/07/06/wxapp-develop-section.html</id>
    <published>2017-07-06T03:46:09.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序-移动端商城"><a href="#微信小程序-移动端商城" class="headerlink" title="微信小程序-移动端商城"></a>微信小程序-移动端商城</h1><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>git 复制和拉取分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@gitlab.modernavenue.com:10022/fe/wx-app.git</span><br><span class="line">cd wx-app</span><br><span class="line">git checkout -b canudilo-product</span><br><span class="line">git pull origin canudilo-product</span><br><span class="line">git checkout product</span><br><span class="line">git checkout -b 01men-product</span><br><span class="line">git pull origin 01men-product</span><br><span class="line">git checkout --orphan release</span><br><span class="line">git reset --hard</span><br><span class="line">git pull origin release</span><br><span class="line">git checkout -b canudilo-release</span><br><span class="line">git pull origin canudilo-release</span><br><span class="line">git checkout release</span><br><span class="line">git checkout -b 01men-release</span><br><span class="line">git pull origin 01men-release</span><br></pre></td></tr></table></figure><ul><li>添加 git 钩子<br>新建文件 wx-app/.git/hooks/pre-push，文件内容为</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">while read local_ref local_sha remote_ref remote_sha</span><br><span class="line">do</span><br><span class="line">    branch=$(git rev-parse --symbolic --abbrev-ref $local_ref)</span><br><span class="line">    if [ &quot;release&quot; == &quot;$branch&quot; ]; then</span><br><span class="line">        git checkout canudilo-release</span><br><span class="line">        git pull -r origin canudilo-release</span><br><span class="line">        git rebase release</span><br><span class="line">        git push -f origin canudilo-release</span><br><span class="line">        git checkout 01men-release</span><br><span class="line">        git pull -r origin 01men-release</span><br><span class="line">        git rebase release</span><br><span class="line">        git push -f origin 01men-release</span><br><span class="line">    fi</span><br><span class="line">    if [ &quot;product&quot; == &quot;$branch&quot; ]; then</span><br><span class="line">        git checkout canudilo-product</span><br><span class="line">        git pull -r origin canudilo-product</span><br><span class="line">        git rebase product</span><br><span class="line">        git push -f origin canudilo-product</span><br><span class="line">        git checkout 01men-product</span><br><span class="line">        git pull -r origin 01men-product</span><br><span class="line">        git rebase product</span><br><span class="line">        git push -f origin 01men-product</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ul><li><p>安装 npm 模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd wx-app</span><br><span class="line">npm install</span><br><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure></li><li><p>安装微信开发者工具</p></li></ul><blockquote><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="noopener">微信开发者工具</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="noopener">开发文档</a></p></blockquote><ul><li>导入项目代码</li></ul><blockquote><p>注：需要有开发者权限，’小程序ID’</p></blockquote><ol><li><p>卡奴AppID(小程序ID) wx31674f508491c876</p></li><li><p>01men AppID(小程序ID) wx6e71dc39094db668</p></li></ol><p>项目目录选择 wx-app\src (dist目录为发布时用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//测试微信号</span><br><span class="line">modernavenuetest</span><br><span class="line">123456test(原密码18565538230test)</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>app.js — 对本页面的窗口表现进行配置。</li><li>app.json — 对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</li><li><p>app.wxss — 接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。</p></li><li><p>images — 存放项目图片</p></li><li>pages — 存放项目页面相关文件</li><li>pages/common — 存放独立wxss样式文件和template,可import引入</li><li>utils — 存放utils文件，可require引入  </li><li>configs — 配置文件 api 等配置</li><li>components — 模块组件 </li></ul><h3 id="开发步骤和细节"><a href="#开发步骤和细节" class="headerlink" title="开发步骤和细节"></a>开发步骤和细节</h3><ul><li>图片资源</li></ul><p>有关微信小程序的前台资源，已放在  cache1 上的<br>    /home/modern/datas/wxapp<br>目录下，以后这类的全在这里 ( 相关的 nginx 都已改好 )</p><p>默认对应的测试/正式访问的 url 如下：<br><a href="https://testimage.modernavenue.com/wxapp/01men/activity/home-c1.jpg" target="_blank" rel="noopener">https://testimage.modernavenue.com/wxapp/01men/activity/home-c1.jpg</a><br><a href="http://staticm.modernavenue.com/wxapp/01men/activity/home-c1.jpg" target="_blank" rel="noopener">http://staticm.modernavenue.com/wxapp/01men/activity/home-c1.jpg</a><br>如果后续产品那提出来，微信小程序的要修改相关显示资源图片，上传与下载的目录对应在这里<br>    /home/modern/datas/wxapp/(小程序名，如：01men、canudilo)/… </p><ul><li>页面生命周期</li></ul><ol><li>小程序注册完成后，加载页面，触发onLoad方法。</li><li>页面载入后触发onShow方法，显示页面。</li><li>首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次。</li><li>当小程序后台运行或跳转到其他页面时，触发onHide方法。</li><li>当小程序有后台进入到前台运行或重新进入页面时，触发onShow方法。</li><li>当使用重定向方法wx.redirectTo(OBJECT)或关闭当前页返回上一页wx.navigateBack()，触发onUnload</li></ol><p>常规页面A：onLoad()–&gt;onShow()–&gt;onReady()–&gt;onHide()–&gt;onUnload()<br>释义：<br>onLoad()：监听页面加载，一个页面只会调用一次<br>onShow()：监听页面显示，每次打开页面都会调用一次<br>onReady()：监听页面初次渲染完成，一个页面只会调用一次，代表页面加载完毕，视图层和逻辑层可进行交互<br>onHide()：监听页面隐藏，当页面被覆盖或进入后台执行<br>onUnload()：监听页面卸载，当页面被关闭或内存不足主动销毁页面</p><p>wx.navigateTo跳转状态下，页面A和页面B的生命周期逻辑<br>进入A页面：A执行onLoad()–&gt;onShow()–&gt;onReady()；<br>A页面navigateTo B页面：A执行onHide()，B执行onLoad()–&gt;onShow()–&gt;onReady()；<br>B页面返回A页面：B执行onUnload()，A执行onReady()；<br>退出A页面：A执行onUnload()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  onLoad:function(options)&#123;</span><br><span class="line">    // 页面初始化 options为页面跳转所带来的参数</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady:function()&#123;</span><br><span class="line">    // 页面渲染完成</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow:function()&#123;</span><br><span class="line">    // 页面显示</span><br><span class="line">  &#125;,</span><br><span class="line">  onHide:function()&#123;</span><br><span class="line">    // 页面隐藏</span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload:function()&#123;</span><br><span class="line">    // 页面关闭</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>异步获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var _this = this;</span><br><span class="line">var param = fetch.requestBase();</span><br><span class="line">param.orderId = e.currentTarget.dataset.id;</span><br><span class="line">var url=config.host+config.orderDelet;</span><br><span class="line">fetch.fetch(&apos;GET&apos;,url,param,(err,res)=&gt;&#123;</span><br><span class="line">    if (res.ecode === &apos;0000&apos;) &#123;</span><br><span class="line">        console.log(res.data);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        fetch.defaultErrorDeal(url,&apos;请求错误&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="版本控制流程"><a href="#版本控制流程" class="headerlink" title="版本控制流程"></a>版本控制流程</h3><ul><li>分支</li></ul><p>release 预发布测试分支<br>product 发布主分支</p><ul><li>开发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout product  </span><br><span class="line">git checkout -b BRANCH</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;COMMENT&apos;</span><br></pre></td></tr></table></figure><p>BRANCH 分支按照develop- feature- fixbug-  release- 来命名 简写dev-  fea-  fix-  rel-</p><p>COMMENT 主要写功能点 bug 等</p><ul><li>测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout release</span><br><span class="line">git pull origin release</span><br><span class="line">git merge --no-ff BRANCH</span><br><span class="line">git push origin release</span><br></pre></td></tr></table></figure><ul><li>发布</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git push origin BRANCH  </span><br><span class="line">https://gitlab.modernavenue.com/  </span><br><span class="line">Merge Requests --&gt; New Merge Requests --&gt; Select source branch (BRANCH) --&gt; Compare branches and continue  </span><br><span class="line">选择 Assignee, 勾选 Remove source branch when merge request is accepted. --&gt; Save Changes  </span><br><span class="line">如果有冲突，需要进行以下操作  </span><br><span class="line">git checkout product  </span><br><span class="line">git pull origin product  </span><br><span class="line">git checkout BRANCH  </span><br><span class="line">git merge --no-ff product  </span><br><span class="line">git push origin BRANCH</span><br></pre></td></tr></table></figure><h3 id="不同小程序"><a href="#不同小程序" class="headerlink" title="不同小程序"></a>不同小程序</h3><ul><li>分支<br>canudilo-product 卡奴发布分支<br>01men-product 01men发布分支<br>canudilo-release 卡奴测试分支<br>01men-release 01men测试分支  </li></ul><p>更新以上分支需要增加-r 参数（rebase）  </p><blockquote><p>git pull -r origin BRANCH  </p></blockquote><ul><li>配置区别<br>app.json 首页进入不同修改，标题修改<br>configs/config.js 请求接口平台参数不同修改  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小程序-移动端商城&quot;&gt;&lt;a href=&quot;#微信小程序-移动端商城&quot; class=&quot;headerlink&quot; title=&quot;微信小程序-移动端商城&quot;&gt;&lt;/a&gt;微信小程序-移动端商城&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="wxapp" scheme="http://junhey.com/tags/wxapp/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建git过程</title>
    <link href="http://junhey.com/2017/03/20/centos%E6%90%AD%E5%BB%BAgit%E8%BF%87%E7%A8%8B.html"/>
    <id>http://junhey.com/2017/03/20/centos搭建git过程.html</id>
    <published>2017-03-20T14:18:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="确认服务器是否安装Git"><a href="#确认服务器是否安装Git" class="headerlink" title="确认服务器是否安装Git"></a>确认服务器是否安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa git</span><br></pre></td></tr></table></figure><h3 id="首先需要安装Git，可以使用yum源在线安装"><a href="#首先需要安装Git，可以使用yum源在线安装" class="headerlink" title="首先需要安装Git，可以使用yum源在线安装"></a>首先需要安装Git，可以使用yum源在线安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h3 id="创建用户junhey-git"><a href="#创建用户junhey-git" class="headerlink" title="创建用户junhey-git"></a>创建用户junhey-git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd junhey-git</span><br><span class="line">passwd junhey-git</span><br></pre></td></tr></table></figure><h3 id="生成ssh公钥"><a href="#生成ssh公钥" class="headerlink" title="生成ssh公钥"></a>生成ssh公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">su junhey-git</span><br><span class="line">cd ~</span><br><span class="line">mkdir .ssh</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd .ssh/</span><br><span class="line">cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="添加junhey-git到sudoers文件"><a href="#添加junhey-git到sudoers文件" class="headerlink" title="添加junhey-git到sudoers文件"></a>添加junhey-git到sudoers文件</h3><p>junhey-git用户现在对一些文件夹没有操作权限，修改/etc/sudoers文件来改变他的权限。最高管理员用户用下面命令打开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure></p><p>然后我们在vim中找到下面这行<br>root ALL=(ALL) ALL<br>按i键开始插入，回车一下在下面一行加上<br>junhey-git ALL=(ALL) ALL<br>接着按下esc键，输入 :wq ，回车保存退出</p><h3 id="创建Git代码仓库"><a href="#创建Git代码仓库" class="headerlink" title="创建Git代码仓库"></a>创建Git代码仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir gitrepo</span><br><span class="line">cd gitrepo</span><br><span class="line">mkdir test.git</span><br><span class="line">chown -R junhey-git:junhey-git gitrepo/</span><br><span class="line">git init --bare test.git</span><br></pre></td></tr></table></figure><p>git clone ssh:<a href="mailto://username@username.webfactional.com" target="_blank" rel="noopener">//username@username.webfactional.com</a>:/home/username/webapps/git_app/repos/dev.git</p><h3 id="本地拉取代码-克隆仓库"><a href="#本地拉取代码-克隆仓库" class="headerlink" title="本地拉取代码/克隆仓库"></a>本地拉取代码/克隆仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">git init</span><br><span class="line">git remote add origin junhey-git@139.129.130.226:/gitrepo/test.git</span><br><span class="line">//或者</span><br><span class="line">git clone junhey-git@139.129.130.226:/gitrepo/test.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;确认服务器是否安装Git&quot;&gt;&lt;a href=&quot;#确认服务器是否安装Git&quot; class=&quot;headerlink&quot; title=&quot;确认服务器是否安装Git&quot;&gt;&lt;/a&gt;确认服务器是否安装Git&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://junhey.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://junhey.com/tags/linux/"/>
    
      <category term="git" scheme="http://junhey.com/tags/git/"/>
    
      <category term="centos" scheme="http://junhey.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>javascript 函数</title>
    <link href="http://junhey.com/2017/03/17/javascript-function.html"/>
    <id>http://junhey.com/2017/03/17/javascript-function.html</id>
    <published>2017-03-17T04:36:56.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数创建方式"><a href="#函数创建方式" class="headerlink" title="函数创建方式"></a>函数创建方式</h3><ul><li>声明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function consoleTip ()&#123;</span><br><span class="line">    console.log(&quot;tip!&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表达式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var consoleTip = function()&#123; </span><br><span class="line">    console.log(&quot;tip!&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>两种方式异同</li></ul><ol><li><p>表达式方式适合用来定义只使用一次的函数，声明方式定义的函数没有这个限制，当然也不是绝对的，这个区别只适用于编码规范上；</p></li><li><p>声明方式定义的函数可以在函数调用之前定义也可以在函数调用之后定义，而表达式方式定义的函数只能在函数调用之前定义；</p></li></ol><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数参数包括形参，实参，形参就是函数定义时的参数；实参就是函数调用时传入的参数。由于js是弱类型语言，所以js函数的形参不指定类型。</p><p>js函数的形参和实参个数可以不一致。形参个数小于实参时，未传的形参值都是undefined,注意形参可以指定默认值，但是只能在函数体内部指定;形参个数小于实参时，在函数体内引用多余实参，必须通过实参对象arguments来获取实参，在函数体内部arguments就是实参对象的引用，并且此时的实参对象是一个数组对象，数组对象每一项对应着函数调用时传入的参数。</p><p>PS：实参对象有两个特殊属性callee和caller，其中callee属性代指当前正在执行的函数，caller属性代指调用当前正在执行的函数的函数，caller属性不是标准属性，不是所有浏览器都支持。使用callee属性的典型例子就是匿名函数的递归调用。例如定义一个阶乘函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var fact = function(x)&#123; </span><br><span class="line">    if(x &lt;= 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return arguments.callee(x-1)*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>在函数中声明的变量(包括函数形参)在整个函数体内都是可见的，包括嵌套的函数中，在函数外部是不可见的;函数体内部定义的变量会覆盖同名的全局变量;</p><p>函数作用域中有个特性很重要，就是<em>声明提前</em>，意思就是在函数内部任意位置声明的变量，在函数体内部任意位置都是可见的，这是因为js引擎在预编译js时会把函数中所有的变量声明都提前至函数体顶部。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var scope = &quot;outter&quot;;</span><br><span class="line">function()&#123;</span><br><span class="line">    console.log(scope);  //undefined</span><br><span class="line">    var scope = &quot;inner&quot;;</span><br><span class="line">    console.log(scope); //inner</span><br><span class="line">&#125;();</span><br><span class="line">console.log(scope);     //outter</span><br></pre></td></tr></table></figure></p><p>说明：<br>　　undefined　由于函数作用域的声明提前特性，这里的scope已经在函数顶部声明，但是没有被赋值，所以scope值为undefined<br>　　inner　scope在函数体内部声明，并且有赋值<br>　　outter 　函数体内部定义的变量会覆盖同名的全局变量，但是不影响全局变量的值</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数的用处就是用来初始化新创建的对象，例子：`var ary = new Array();</p><p>构造函数与普通函数的区别：<br>　1.函数命名上有区别，构造函数命名时通常是首字符大写，普通函数命名时首字符小写；<br>　2.调用方式的区别，构造函数是通过new关键字调用，而普通函数直接调用。</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>把函数定义和函数执行结合到一起就是立即执行函数，也叫自执行函数。</p><p>这里需要注意两点：</p><ol><li>函数定义仅限于表达式方式定义的函数；</li><li>函数执行实际上就是对函数表达式做一次运算，所以一元运算符都可以让函数执行。</li></ol><p>这样的话，立即执行函数就会有多种写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;console.log(&quot;IIFE&quot;);&#125;());</span><br><span class="line">(function()&#123;console.log(&quot;IIFE&quot;);&#125;)();</span><br><span class="line">!function()&#123;console.log(&quot;IIFE&quot;);&#125;();</span><br><span class="line">void function()&#123;console.log(&quot;IIFE&quot;);&#125;();</span><br><span class="line">~function()&#123;console.log(&quot;IIFE&quot;);&#125;();</span><br><span class="line">//....</span><br></pre></td></tr></table></figure></p><p>立即执行函数可以接受参数，上面的写法都是可以的，但是编码规范推荐第一种写法，jQuery库使用的就是第一种写法。</p><p>那么自执行函数的用处有哪些呢？总结起来常用也就两种：</p><ol><li>保存参数上下文环境；</li><li>作为命名空间。</li></ol><p>用处1的适用场景：循环中执行异步函数，并且函数参数随循环变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 实例一</span><br><span class="line">* 错误写法,因为jQuery的post方法是异步的，循环十次，post方法并行跑十次，</span><br><span class="line">* 循环比post方法执行要快，最终传过去的i值都变成了10,即服务端收到index的都是10</span><br><span class="line">*/</span><br><span class="line">for(var i=0; i&lt;10; i++)&#123;</span><br><span class="line">    $.post(url,&#123;index:i&#125;,function()&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">* 正确写法,这样对于循环体中的立即执行函数来说，每次循环得到的参数都不同。立即执行函数</span><br><span class="line">* 每执行一次都会创建一个函数上下文环境，在这个上下文环境中的变量值不受外界影响，</span><br><span class="line">* 循环十次就会创建十个上下文环境，并且每个上下文环境的i值都不一样。这样的话，</span><br><span class="line">* 虽然post方法是异步方法，但是是在每一个上下文环境中执行的，也就是说循环十次，</span><br><span class="line">* post方法在十个上下文环境中分别执行了一次，post方法中使用的index参数每次都不一样，</span><br><span class="line">* 最终服务端收到的index值就是从0到9十个数值</span><br><span class="line">*/</span><br><span class="line">for(var i=0; i&lt;10; i++)&#123;</span><br><span class="line">    (function(index)&#123;$.post(url,&#123;index:index&#125;,function()&#123;&#125;);&#125;(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 实例二    </span><br><span class="line">* 错误写法，最终会输出十个10，因为循环体的语句会延时执行</span><br><span class="line">*/</span><br><span class="line">for(var i=0; i&lt;10; i++)&#123;</span><br><span class="line">    setTimeout(function()&#123;console.log(i);&#125;,100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//正确写法，最终会输出0到9十个数值，原理同上</span><br><span class="line">for(var i=0; i&lt;10; i++)&#123;</span><br><span class="line">    (function(x)&#123;setTimeout(function()&#123;console.log(x);&#125;,100);&#125;(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用处2的适用场景：你需要写一个公共模块，这个公共模块在很多地方都会使用，但是要保证公共模块中使用的变量和函数不会对其它模块造成污染，这样的话这个公共模块就需要一个单独的不同于其它模块的命名空间。</p><p>案例1：创建jQuery插件，保证创建的jQuery插件在jQuery的命名空间内都是有效的，这样每个jQuery对象才可以使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(function($)&#123;</span><br><span class="line">    $.fn.changeStyle = function(colorStr)&#123;</span><br><span class="line">        this.css(&quot;color&quot;,colorStr);        </span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(jQuery));</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/518d424d4994" target="_blank" rel="noopener">jQuery插件开发</a></p><p>案例2：创建一个带有私有变量和私有方法的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = (function()&#123;</span><br><span class="line">    var privateAttr,</span><br><span class="line">        publicAttr;        </span><br><span class="line">    function _setPriAttr()&#123;</span><br><span class="line">        privateAttr = &quot;private&quot;;</span><br><span class="line">    &#125;        </span><br><span class="line">    function getPriAttr()&#123;</span><br><span class="line">        return privateAttr;</span><br><span class="line">    &#125;        </span><br><span class="line">    return &#123;</span><br><span class="line">        attr:publicAttr,            </span><br><span class="line">        getAttr:function()&#123;</span><br><span class="line">            getPriAttr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>通过这种方式创建的对象，利用立即执行函数的return语句对外暴露属性以及方法，并且可以保证没有对外暴露对象的属性和方法，在对象外边是无法访问到的。</p><p>总结：其实用处1和用处2的原理都是一样的，都是利用了函数作用域的概念，请仔细体会。</p><p>参考资料： <a href="https://item.jd.com/10974436.html" target="_blank" rel="noopener">js权威指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数创建方式&quot;&gt;&lt;a href=&quot;#函数创建方式&quot; class=&quot;headerlink&quot; title=&quot;函数创建方式&quot;&gt;&lt;/a&gt;函数创建方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;声明&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="function" scheme="http://junhey.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>phantomjs安装在centos和入门教程</title>
    <link href="http://junhey.com/2017/03/01/phantomjs-install-centos.html"/>
    <id>http://junhey.com/2017/03/01/phantomjs-install-centos.html</id>
    <published>2017-03-01T03:36:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="http://phantomjs.org/" target="_blank" rel="noopener">http://phantomjs.org/</a></p><p><a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">下载与安装</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#安装依赖软件</span><br><span class="line">yum -y install wget fontconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#下载安装包</span><br><span class="line">wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2</span><br><span class="line"></span><br><span class="line">#解压安装包</span><br><span class="line">tar xjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重命名</span><br><span class="line">mv /usr/local/phantomjs-2.1.1-linux-x86_64 /usr/local/phantomjs</span><br><span class="line"></span><br><span class="line">#添加环境变量/建立软链接</span><br><span class="line">export PHANTOMJS_HOME=/usr/local/phantomjs/bin</span><br><span class="line">ln -s /usr/local/phantomjs/bin/phantomjs /usr/bin/</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">phantomjs --version</span><br></pre></td></tr></table></figure><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p><a href="http://phantomjs.org/documentation/" target="_blank" rel="noopener">官方文档</a></p><p><a href="http://javascript.ruanyifeng.com/tool/phantomjs.html" target="_blank" rel="noopener">PhantomJS教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方网站&quot;&gt;&lt;a href=&quot;#官方网站&quot; class=&quot;headerlink&quot; title=&quot;官方网站&quot;&gt;&lt;/a&gt;官方网站&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="javascript" scheme="http://junhey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
      <category term="phantomjs" scheme="http://junhey.com/tags/phantomjs/"/>
    
  </entry>
  
  <entry>
    <title>阿里云centos搭建nginx和node全过程</title>
    <link href="http://junhey.com/2017/02/26/aliyun-centos-nginx-and-node-the-whole-process.html"/>
    <id>http://junhey.com/2017/02/26/aliyun-centos-nginx-and-node-the-whole-process.html</id>
    <published>2017-02-26T08:59:09.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p><em>centos版本:CentOS release 6.8 (Final)</em></p><ol><li>ssh登录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@139.129.130.226</span><br></pre></td></tr></table></figure></li></ol><p>然后输入密码</p><ol start="2"><li><p>yum更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></li><li><p>编译源代码的开发工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#进入/usr/src文件夹，这个文件夹通常用来存放软件源代码</span><br><span class="line">cd /usr/src</span><br><span class="line"></span><br><span class="line">#从Node.js的站点中获取压缩档源代码, 我选择的版本为v0.10.18</span><br><span class="line">wget http://nodejs.org/dist/v0.10.18/node-v0.10.18.tar.gz</span><br><span class="line"></span><br><span class="line">#解压缩源文件，并且进入到压缩后的文件夹中</span><br><span class="line">tar zxf node-v0.10.18.tar.gz </span><br><span class="line">cd node-v0.10.18 </span><br><span class="line"></span><br><span class="line">#执行配置脚本来进行编译预处理</span><br><span class="line">./configure</span><br><span class="line">make&amp;make install</span><br><span class="line"></span><br><span class="line">#测试安装Node.js的模块管理器npm</span><br><span class="line">npm -g install express</span><br><span class="line"></span><br><span class="line">#建立超级链接, 不然 sudo node 时会报 &quot;command not found&quot;</span><br><span class="line">sudo ln -s /usr/local/bin/node /usr/bin/node </span><br><span class="line">sudo ln -s /usr/local/lib/node /usr/lib/node </span><br><span class="line">sudo ln -s /usr/local/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#安装一些额外的软件仓库</span><br><span class="line">sudo yum install epel-release -y</span><br><span class="line">rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line">#包管理工具安装nginx</span><br><span class="line">sudo yum install nginx -y</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>通过公网ip (本地可以通过 localhost /或 127.0.0.1 ) 查看nginx 服务返回的信息:<br><em>Welcome to nginx!</em></p><p>其中启动过程报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Starting nginx: nginx: [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)</span><br><span class="line">                                                           [FAILED]</span><br></pre></td></tr></table></figure></p><p>解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure></p><p>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen       80 default_server;</span><br><span class="line">listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen       80;</span><br><span class="line">#listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure></p><p>重新启动nginx即可 试过kill nginx 进程，修改关闭ipv6都不管用</p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><p>安装说明：</p><ul><li>系统环境：Centos-6.8</li><li>安装软件：mongodb-linux-x86_64-2.4.9.tgz</li><li>下载地址：<a href="http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.4.9.tgz" target="_blank" rel="noopener">http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.4.9.tgz</a></li><li>上传位置：/usr/local/</li><li>软件安装位置：/usr/local/mongodb</li><li>数据存放位置：/var/mongodb/data - 日志存放位置：/var/mongodb/logs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#进入文件夹/usr/local,下载mongodb源代码</span><br><span class="line">cd /usr/local</span><br><span class="line">wget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.4.9.tgz</span><br><span class="line"></span><br><span class="line">#解压安装包，重命名文件夹为mongodb</span><br><span class="line">tar zxvf mongodb-linux-x86_64-2.4.9.tgz </span><br><span class="line">mv mongodb-linux-x86_64-2.4.9 mongodb</span><br><span class="line"></span><br><span class="line">#在var文件夹里建立mongodb文件夹，并分别建立文件夹data用于存放数据，logs用于存放日志</span><br><span class="line">mkdir /var/mongodb</span><br><span class="line">mkdir /var/mongodb/data</span><br><span class="line">mkdir /var/mongodb/logs</span><br><span class="line"></span><br><span class="line">#打开rc.local文件，添加CentOS开机启动项</span><br><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line">#将mongodb启动命令追加到本文件中，让mongodb开机自启动</span><br><span class="line">/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork</span><br><span class="line"></span><br><span class="line">#启动mongodb</span><br><span class="line">/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork</span><br><span class="line"></span><br><span class="line">#看到如下信息说明已经安装完成并成功启动</span><br><span class="line">forked process: 18394</span><br><span class="line">all output going to: /var/mongodb/logs/log.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;centos版本:CentOS release 6.8 (Final)&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ssh登录&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="node" scheme="http://junhey.com/tags/node/"/>
    
      <category term="php" scheme="http://junhey.com/tags/php/"/>
    
      <category term="centos" scheme="http://junhey.com/tags/centos/"/>
    
      <category term="nginx" scheme="http://junhey.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://junhey.com/2016/12/31/hello-world.html"/>
    <id>http://junhey.com/2016/12/31/hello-world.html</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中的立即执行函数</title>
    <link href="http://junhey.com/2016/11/29/Immediate-execution-function-in-JavaScript.html"/>
    <id>http://junhey.com/2016/11/29/Immediate-execution-function-in-JavaScript.html</id>
    <published>2016-11-29T00:18:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>注：此文只在理解立即执行函数，不在所谓原创，文中大量引用<a href="http://javascript.ruanyifeng.com/grammar/function.html#toc23" target="_blank" rel="noopener">阮一峰的JavaScript标准参考教程</a>、<a href="http://javascript.ruanyifeng.com/grammar/function.html#toc23" target="_blank" rel="noopener">MDN的JavaScript 参考文档</a>和<a href="http://www.cnblogs.com/tomxu/archive/2011/12/31/2289423.html" target="_blank" rel="noopener">深入理解JavaScript系列（4）：立即调用的函数表达式</a>的内容。</p><p>描述<br>立即执行函数通常有下面两种写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123; </span><br><span class="line">   ...</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(function()&#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>在Javascript中，一对圆括号“()”是一种运算符，跟在函数名之后，表示调用该函数。比如，print()就表示调用print函数。<br>这个写法和我们想象的写法不一样（知道的人当然已经习以为常）很多人刚开始理解立即执行函数的时候，觉得应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function ()&#123; ... &#125;()；</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line"></span><br><span class="line">function fName()&#123; ... &#125;();</span><br></pre></td></tr></table></figure></p><p>然而事实却是这样：SyntaxError: Unexpected token (。这是为什么呢？</p><p>解释<br>要理解立即执行函数，需要先理解一些函数的基本概念：函数声明、函数表达式,因为我们定义一个函数通常都是通过这两种方式</p><p>函数声明 (function 语句)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function name([param[, param[, ... param]]]) &#123;</span><br><span class="line">   statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name：函数名；<br>param：被传入函数的参数的名称,一个函数最多可以有255个参数；<br>statements：这些语句组成了函数的函数体。</p><p>函数表达式 (function expression)</p><p>函数表达式和函数声明非常类似,它们甚至有相同的语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function [name]([param] [, param] [..., param]) &#123;</span><br><span class="line">   statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name：函数名,可以省略,省略函数名的话,该函数就成为了匿名函数；<br>param：被传入函数的参数的名称,一个函数最多可以有255个参数；<br>statements：这些语句组成了函数的函数体。</p><p>下面我们给出一些栗子说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 声明函数f1</span><br><span class="line">function f1() &#123;</span><br><span class="line">    console.log(&quot;f1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 通过()来调用此函数</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个匿名函数的函数表达式，被赋值给变量f2:</span><br><span class="line">var f2 = function() &#123;</span><br><span class="line">    console.log(&quot;f2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//通过()来调用此函数</span><br><span class="line">f2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一个命名为f3的函数的函数表达式(这里的函数名可以随意命名，可以不必和变量f3重名)，被赋值给变量f3:</span><br><span class="line">var f3 = function f3() &#123;</span><br><span class="line">    console.log(&quot;f2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//通过()来调用此函数</span><br><span class="line">f3();</span><br></pre></td></tr></table></figure></p><p>上面所起的作用都差不多，但还是有一些差别<br>1、函数名和函数的变量存在着差别。函数名不能被改变，但函数的变量却能够被再分配。函数名只能在函数体内使用。倘若在函数体外使用函数名将会导致错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var y = function x() &#123;&#125;;</span><br><span class="line">alert(x); // throws an erro</span><br></pre></td></tr></table></figure></p><p>2、函数声明定义的函数可以在它被声明之前使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo(); // alerts FOO!</span><br><span class="line">function foo() &#123;</span><br><span class="line">   alert(&apos;FOO!&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但函数声明非常容易（经常是意外地）转换为函数表达式。当它不再是一个函数声明：</p><p>成为表达式的一部分<br>不再是函数或者script自身的“源元素” （source element）。在script或者函数体内“源元素”并非是内嵌的语句（statement）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var x = 0;               // source element</span><br><span class="line">if (x == 0) &#123;            // source element</span><br><span class="line">   x = 10;               // 非source element</span><br><span class="line">   function boo() &#123;&#125;     // 非 source element</span><br><span class="line">&#125;</span><br><span class="line">function foo() &#123;         // source element</span><br><span class="line">   var y = 20;           // source element</span><br><span class="line">   function bar() &#123;&#125;     // source element</span><br><span class="line">   while (y == 10) &#123;     // source element</span><br><span class="line">      function blah() &#123;&#125; // 非 source element</span><br><span class="line">      y++;               //非source element</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function foo() &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 函数表达式 </span><br><span class="line">(function bar() &#123;&#125;)</span><br><span class="line"></span><br><span class="line">// 函数表达式</span><br><span class="line">x = function hello() &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (x) &#123;</span><br><span class="line">   // 函数表达式</span><br><span class="line">   function world() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 函数声明</span><br><span class="line">function a() &#123;</span><br><span class="line">   // 函数声明</span><br><span class="line">   function b() &#123;&#125;</span><br><span class="line">   if (0) &#123;</span><br><span class="line">      //函数表达式</span><br><span class="line">      function c() &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们来解释上面的SyntaxError: Unexpected token (：<br>产生这个错误的原因是，Javascript引擎看到function关键字之后，认为后面跟的是函数定义语句，不应该以圆括号结尾。<br>解决方法就是让引擎知道，圆括号前面的部分不是函数定义语句，而是一个表达式，可以对此进行运算。所以应该这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123; /* code */ &#125;()); </span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">(function()&#123; /* code */ &#125;)();</span><br></pre></td></tr></table></figure></p><p>这两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义，所以就避免了错误。这就叫做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称IIFE。</p><p>注意，上面的两种写法的结尾，都必须加上分号。<br>推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var i = function()&#123; return 10; &#125;();</span><br><span class="line"></span><br><span class="line">true &amp;&amp; function()&#123; /* code */ &#125;();</span><br><span class="line"></span><br><span class="line">0, function()&#123; /* code */ &#125;();</span><br></pre></td></tr></table></figure></p><p>甚至像这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123; /* code */ &#125;();</span><br><span class="line"></span><br><span class="line">~function()&#123; /* code */ &#125;();</span><br><span class="line"></span><br><span class="line">-function()&#123; /* code */ &#125;();</span><br><span class="line"></span><br><span class="line">+function()&#123; /* code */ &#125;();</span><br></pre></td></tr></table></figure></p><p>new关键字也能达到这个效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new function()&#123; /* code */ &#125;</span><br><span class="line"></span><br><span class="line">new function()&#123; /* code */ &#125;() // 只有传递参数时，才需要最后那个圆括号。</span><br></pre></td></tr></table></figure></p><p>使用<br>那我们通常为什么使用函数立即表达式呢，以及我如何使用呢？</p><p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：</p><p>一是不必为函数命名，避免了污染全局变量；<br>二是IIFE内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 写法一</span><br><span class="line">var tmp = newData;</span><br><span class="line">processData(tmp);</span><br><span class="line">storeData(tmp);</span><br><span class="line"></span><br><span class="line">// 写法二</span><br><span class="line">(function ()&#123;</span><br><span class="line">  var tmp = newData;</span><br><span class="line">  processData(tmp);</span><br><span class="line">  storeData(tmp);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p><p>最后在举一个真实的栗子：在JavaScript的OOP中，我们可以通过IIFE来实现一个单例(关于单例的优化不再此处讨论)</p><p>// 创建一个立即调用的匿名函数表达式<br>// return一个变量，其中这个变量里包含你要暴露的东西<br>// 返回的这个变量将赋值给counter，而不是外面声明的function自身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var counter = (function () &#123;</span><br><span class="line">    var i = 0;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        get: function () &#123;</span><br><span class="line">            return i;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function (val) &#123;</span><br><span class="line">            i = val;</span><br><span class="line">        &#125;,</span><br><span class="line">        increment: function () &#123;</span><br><span class="line">            return ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; ());</span><br><span class="line"></span><br><span class="line">// counter是一个带有多个属性的对象，上面的代码对于属性的体现其实是方法</span><br><span class="line"></span><br><span class="line">counter.get(); // 0</span><br><span class="line">counter.set(3);</span><br><span class="line">counter.increment(); // 4</span><br><span class="line">counter.increment(); // 5</span><br><span class="line"></span><br><span class="line">counter.i; // undefined 因为i不是返回对象的属性</span><br><span class="line">i; // 引用错误: i 没有定义（因为i只存在于闭包）</span><br></pre></td></tr></table></figure></p><p>原文地址：<a href="https://segmentfault.com/a/1190000003902899" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003902899</a><br>文章转载，如有冒犯请联系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注：此文只在理解立即执行函数，不在所谓原创，文中大量引用&lt;a href=&quot;http://javascript.ruanyifeng.com/grammar/function.html#toc23&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的Jav
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://junhey.com/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://junhey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>rem布局</title>
    <link href="http://junhey.com/2016/11/23/2016-11-24-04-16.html"/>
    <id>http://junhey.com/2016/11/23/2016-11-24-04-16.html</id>
    <published>2016-11-23T20:16:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><p>rem(font size of the root element)是指相对于根元素的字体大小的单位</p><h1 id="rem布局主要有两种形式"><a href="#rem布局主要有两种形式" class="headerlink" title="rem布局主要有两种形式"></a>rem布局主要有两种形式</h1><ul><li><p>css媒体查询 设置好font-size</p></li><li><p>js动态计算font-size</p></li></ul><h1 id="viewport设置"><a href="#viewport设置" class="headerlink" title="viewport设置"></a>viewport设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="rem-初始化"><a href="#rem-初始化" class="headerlink" title="rem 初始化"></a>rem 初始化</h1><blockquote><p>copy from taobao</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    !function (win) &#123;</span><br><span class="line">        function refreshRem() &#123;</span><br><span class="line">            var width = docEl.getBoundingClientRect().width;</span><br><span class="line">            width / dpr &gt; 540 &amp;&amp; (width = 540 * dpr), win.rem = width / 16, docEl.style.fontSize = win.rem + &quot;px&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        var dpr, scale, tid, doc = win.document, docEl = doc.documentElement, metaEl = doc.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;), flexibleEl = doc.querySelector(&apos;meta[name=&quot;flexible&quot;]&apos;);</span><br><span class="line">        if (metaEl) &#123;</span><br><span class="line">            var match = metaEl.getAttribute(&quot;content&quot;).match(/initial\-scale=([&quot;&apos;]?)([\d\.]+)\1?/);</span><br><span class="line">            match &amp;&amp; (scale = parseFloat(match[2]), dpr = parseInt(1 / scale))</span><br><span class="line">        &#125; else if (flexibleEl) &#123;</span><br><span class="line">            var match2 = flexibleEl.getAttribute(&quot;content&quot;).match(/initial\-dpr=([&quot;&apos;]?)([\d\.]+)\1?/);</span><br><span class="line">            match2 &amp;&amp; (dpr = parseFloat(match2[2]), scale = parseFloat((1 / dpr).toFixed(2)))</span><br><span class="line">        &#125;</span><br><span class="line">        if (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">            var k = (win.navigator.appVersion.match(/android/gi), win.navigator.appVersion.match(/iphone/gi)), devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">            dpr = k ? devicePixelRatio &gt;= 3 ? 3 : devicePixelRatio &gt;= 2 ? 2 : 1 : 1, scale = 1 / dpr</span><br><span class="line">        &#125;</span><br><span class="line">        if (docEl.setAttribute(&quot;data-dpr&quot;, dpr), !metaEl)if (metaEl = doc.createElement(&quot;meta&quot;), metaEl.setAttribute(&quot;name&quot;, &quot;viewport&quot;), metaEl.setAttribute(&quot;content&quot;, &quot;initial-scale=&quot; + scale + &quot;, maximum-scale=&quot; + scale + &quot;, minimum-scale=&quot; + scale + &quot;, user-scalable=no&quot;), docEl.firstElementChild) &#123;</span><br><span class="line">            docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            var l = doc.createElement(&quot;div&quot;);</span><br><span class="line">            l.appendChild(metaEl), doc.write(l.innerHTML)</span><br><span class="line">        &#125;</span><br><span class="line">        win.dpr = dpr, win.addEventListener(&quot;resize&quot;, function () &#123;</span><br><span class="line">            clearTimeout(tid), tid = setTimeout(refreshRem, 300)</span><br><span class="line">        &#125;, !1), win.addEventListener(&quot;pageshow&quot;, function (e) &#123;</span><br><span class="line">            e.persisted &amp;&amp; (clearTimeout(tid), tid = setTimeout(refreshRem, 300))</span><br><span class="line">        &#125;, !1), &quot;complete&quot; === doc.readyState ? doc.body.style.fontSize = 12 * dpr + &quot;px&quot; : doc.addEventListener(&quot;DOMContentLoaded&quot;, function () &#123;</span><br><span class="line">            doc.body.style.fontSize = 12 * dpr + &quot;px&quot;</span><br><span class="line">        &#125;, !1), refreshRem()</span><br><span class="line">    &#125;(window);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h1&gt;&lt;p&gt;rem(font size of the root element)是指相对于根元素的字体大小的单位&lt;/p&gt;
&lt;h1 id=&quot;rem
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://junhey.com/categories/JavaScript/"/>
    
    
      <category term="html5" scheme="http://junhey.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>mac上用的比较多的快捷键（常更新）</title>
    <link href="http://junhey.com/2016/11/09/2016-11-10-03-55.html"/>
    <id>http://junhey.com/2016/11/09/2016-11-10-03-55.html</id>
    <published>2016-11-09T19:55:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS X 菜单中的修饰键符号</p><p>Command 键图标（Command 键） - 在某些 Apple 键盘上，此键也可能带有 Apple 标志（apple 标志）<br>Control 键图标（Control 键）<br>Option 或 Alt 键图标（Option 键）-“Alt”可能也出现在此键上<br>Shift 键图标（Shift 键）<br>Caps lock 键图标（Caps Lock 键）- 切换大写字母锁定开或关<br>fn（功能键） </p><p><img src="http://junhey.com/usr/uploads/2017/01/630794881.png" alt="mac快捷键.png"></p><p>control+command+f 全屏的快捷键</p><p>command+option+i  开发者模式</p><p>Command+W 关分页</p><p>Command+R 刷新</p><p>Command+T  新开分页</p><p>shift+Command+3全屏和+4局部  截屏键</p><p>finder =&gt;command + option + 拖拽到桌面上  桌面快捷方式</p><p>command +f3 回到桌面切换(非全屏模式下)</p><p>command+control+f 程序全屏切换</p><p>command+tab 程序切换</p><p>cmd+c→cmd+v 复制粘贴</p><p>cmd+c→cmd+option+v 剪切粘贴</p><p>command+q 完全退出程序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac OS X 菜单中的修饰键符号&lt;/p&gt;
&lt;p&gt;Command 键图标（Command 键） - 在某些 Apple 键盘上，此键也可能带有 Apple 标志（apple 标志）&lt;br&gt;Control 键图标（Control 键）&lt;br&gt;Option 或 Alt 键图标
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://junhey.com/categories/JavaScript/"/>
    
    
      <category term="mac" scheme="http://junhey.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装nginx</title>
    <link href="http://junhey.com/2016/11/07/2016-11-07-08-36.html"/>
    <id>http://junhey.com/2016/11/07/2016-11-07-08-36.html</id>
    <published>2016-11-07T00:36:58.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac安装nginx"><a href="#Mac安装nginx" class="headerlink" title="Mac安装nginx"></a>Mac安装nginx</h1><h2 id="安装brew-由于MAC自带ruby，所以安装起来很方便"><a href="#安装brew-由于MAC自带ruby，所以安装起来很方便" class="headerlink" title="安装brew(由于MAC自带ruby，所以安装起来很方便)"></a>安装brew(由于MAC自带ruby，所以安装起来很方便)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>安装后命令存在 /usr/local/bin/brew</p><h2 id="brew安装nginx"><a href="#brew安装nginx" class="headerlink" title="brew安装nginx"></a>brew安装nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx   （或者 /usr/local/bin/brew install nginx）</span><br></pre></td></tr></table></figure><p>过后等着就行了。会自动安装pcre和ssl等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac安装nginx&quot;&gt;&lt;a href=&quot;#Mac安装nginx&quot; class=&quot;headerlink&quot; title=&quot;Mac安装nginx&quot;&gt;&lt;/a&gt;Mac安装nginx&lt;/h1&gt;&lt;h2 id=&quot;安装brew-由于MAC自带ruby，所以安装起来很方便&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://junhey.com/categories/JavaScript/"/>
    
    
      <category term="mac" scheme="http://junhey.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac上Nginx配置</title>
    <link href="http://junhey.com/2016/11/02/2016-11-02-11-16.html"/>
    <id>http://junhey.com/2016/11/02/2016-11-02-11-16.html</id>
    <published>2016-11-02T03:16:00.000Z</published>
    <updated>2023-08-22T04:11:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>背景</p><p>之前一直使用Apache做静态资源私服及反向代理, 配置稍显复杂, 今天使用nginx来替换Apache, 在此小记一下探索的过程及碰到的问题.</p><p>安装</p><p>本人使用Mac系统, 偷懒的使用了homebrew, 一键完成了安装. 对于其它OS使用解压zip的方式.</p><p>下面从安装–&gt;配置(静态资源私服 php 反向代理)–&gt;问题展开吧</p><p>安装Homebrew</p><p>ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p><p>brew cleanup</p><p>brew doctor<br>安装Nginx</p><p>安装</p><p>brew install nginx<br>启动</p><p>sudo nginx<br>停止</p><p>sudo nginx -s stop<br>配置</p><p>文件目录</p><p>nginx安装文件目录</p><p>/usr/local/Cellar/nginx<br>nginx配置文件目录</p><p>/usr/local/etc/nginx<br>系统hosts位置</p><p>/private/etc/hosts<br>配置nginx</p><p>使用多个配置来管理nginx下的多个websites</p><p>cd /usr/local/etc/nginx</p><p>mkdir conf.d</p><p>vim /usr/local/etc/nginx/nginx.conf<br>在nginx.conf中进行修改, 大致配置可如下, 详细配置见官方文档</p><p>user  your_username staff;<br>worker_processes  1;</p><p>events {<br>    worker_connections  1024;<br>}</p><p>http {<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  65;<br>    include conf.d/*.conf;<br>}<br>注意修改该配置中的your_username为你的Mac用户名.</p><p>到此父级配置已配置完成, 接下来配置用户希望的功能, 例如静态资源私服或反向代理.</p><p>配置自己的静态资源服务器(username.conf), 如下</p><p>server {<br>        listen       80;<br>        server_name  resource.com;<br>        charset utf-8,gbk;<br>        location / {<br>            root   /Users/username/resource;</p><pre><code>    #index  index.html index.htm;    autoindex on;    autoindex_exact_size on;    autoindex_localtime on;}</code></pre><p>}<br>配置反向代理, 如下</p><p>server {<br>    listen       80;<br>    server_name  app.com;</p><pre><code># oauth2的资源服务器location / {    proxy_set_header        Host $http_host;    proxy_pass http://localhost:8080/resource-app/;}location /resource-app/ {    proxy_set_header        Host $http_host;    proxy_pass http://localhost:8080/resource-app/;}# oauth2的授权服务器    location /actor-app/ {    proxy_set_header        Host $http_host;    proxy_pass http://localhost:8082/actor-app/;}</code></pre><p>}<br>配置Php</p><p>安装php-fpm</p><p>Mac OSX 10.9的系统自带了PHP、php-fpm，省去了安装php-fpm的麻烦。 这里需要简单地修改下php-fpm的配置，否则运行php-fpm会报错。</p><p>sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf<br>vim /private/etc/php-fpm.conf<br>修改php-fpm.conf文件中的error_log项，默认该项被注释掉，这里需要去注释并且修改为error_log = /usr/local/var/log/php-fpm.log。如果不修改该值，运行php-fpm的时候会提示log文件输出路径不存在的错误。</p><p>配置hosts</p><p>vim /private/etc/hosts<br>在末尾加入如下代码, 该域名是nginx中server指定的server_name</p><h1 id="针对静态资源私服"><a href="#针对静态资源私服" class="headerlink" title="针对静态资源私服"></a>针对静态资源私服</h1><p>127.0.0.1 resource.com</p><h1 id="针对反向代理"><a href="#针对反向代理" class="headerlink" title="针对反向代理"></a>针对反向代理</h1><p>127.0.0.1 app.com<br>配置完毕, 在浏览器中键入<a href="http://resource.com/可以对指定目录的文件进行浏览,下载" target="_blank" rel="noopener">http://resource.com/可以对指定目录的文件进行浏览,下载</a>; 键入<a href="http://app.com/resource-app或http://app.com/actor-app可分别进入不同的应用" target="_blank" rel="noopener">http://app.com/resource-app或http://app.com/actor-app可分别进入不同的应用</a>.</p><p>测试</p><p>在root根目录中创建文件index.php, 内容如下,</p><p>&lt;?php phpinfo(); ?&gt;<br>启动nginx</p><p>sudo nginx<br>重启nginx</p><p>sudo nginx -s reload<br>停止nginx</p><p>sudo nginx -s stop<br>启动php</p><p>sudo php-fpm<br>在浏览器中输入<a href="http://resource.com/index.php即可看到php的详细信息" target="_blank" rel="noopener">http://resource.com/index.php即可看到php的详细信息</a>.</p><p>问题</p><p>1.键入<a href="http://resource.com/" target="_blank" rel="noopener">http://resource.com/</a>, 服务器返回403界面</p><p>该问题是因为访问权限不够造成, 在nginx.conf首行配置即可,</p><p>user  your_username staff;</p><p>2.目录未显示, 只显示index.html页面</p><p>该问题是指定站点(website)未启用目录浏览功能, 在指定server的location节点启用目录浏览功能,如下,</p><p>autoindex on;<br>autoindex_exact_size<br>autoindex_localtime on;</p><p>来自：<a href="http://arccode.net/2015/02/27/Nginx%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">http://arccode.net/2015/02/27/Nginx%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;背景&lt;/p&gt;
&lt;p&gt;之前一直使用Apache做静态资源私服及反向代理, 配置稍显复杂, 今天使用nginx来替换Apache, 在此小记一下探索的过程及碰到的问题.&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;本人使用Mac系统, 偷懒的使用了homebrew, 一键完成了安装. 对
      
    
    </summary>
    
      <category term="server" scheme="http://junhey.com/categories/server/"/>
    
    
      <category term="mac" scheme="http://junhey.com/tags/mac/"/>
    
      <category term="nginx" scheme="http://junhey.com/tags/nginx/"/>
    
  </entry>
  
</feed>
